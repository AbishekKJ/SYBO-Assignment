openapi: 3.0.0
info:
  title: Sybo Assignment
  description: API documentation for Ninja Spoilers Game.
  version: "V1"
servers:
  - url: "https://evv5qsaiwh.execute-api.us-east-1.amazonaws.com/dev/ninjaSpoilers/api/v1"
paths:
  /user:
    parameters:
      - $ref: "#/components/parameters/HeaderParam"
    post:
      summary: Create User
      description: Takes user's name as input and creates user and returns user uuid and name in the response. This user uuid is to be used in the subsequent user related API calls.
      tags:
        - Users
      requestBody:
        $ref: "#/components/requestBodies/UserCreateParam"
      responses:
        "200":
          description: The response contains name and uuid. This user uuid is to be used in the subsequent user related API calls.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: "string"
                    description: User UUID
                    example: 3167af91-e26d-11eb-87eb-2311b3768ee0
                  name:
                    type: string
                    description: User name passed in the request body
                    example: user1
        "422":
          description: Describes the error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: describes the error
                    example: "name already taken"
        "412":
          $ref: "#/components/responses/ErrorsResponse412"


  /user/{user_id}/state:
    parameters:
      - $ref: "#/components/parameters/HeaderParam"
    put:
      summary: updates user's current game count and high score
      description: Updates user's current game count with current high score
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        $ref: "#/components/requestBodies/UserUpdateParam"
      responses:
        "200":
          description: On successful update of user game state, returns success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Data updated successfully"
        "404":
          $ref: "#/components/responses/UserNotFoundResponse"
        "422":
          description: When the payload has missing / incorrect data, the API returns unprocessable entity (422) response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: describes the error
                    example: "gamesPlayed must be an integer"

    get:
      summary: Fetch user game current status
      description: get user's current game state with current high score
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        "200":
          description: "abc"
          content:
            application/json:
              schema:
                type: object
                properties:
                  gamesPlayed:
                    type: number
                    description: Number of games played by the user
                    example: 42
                  score:
                    type: number
                    description: High score of the user amongst all the games played by him
                    example: 342
        "404":
          $ref: "#/components/responses/UserNotFoundResponse"

  /user/{user_id}/friends:
    parameters:
      - $ref: "#/components/parameters/HeaderParam"
    put:
      summary: updates user friends list
      description: Takes list of user uuids as input and Updates user friends list. Always replaces the existing friends list with the friends liost from the request body.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        $ref: "#/components/requestBodies/UserFriendsUpdateParam"
      responses:
        "200":
          description: "On successful update of friends list, returns success response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Friends list updated"
        "404":
          $ref: "#/components/responses/UserNotFoundResponse"
        "422":
          description: When the payload has missing / incorrect data, the API returns unprocessable entity (422) response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: describes the error
                    example: "Invalid request. Request body should contain only the following keys - friends"

    get:
      summary: Get user friends list
      description: get user friends list
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        "200":
          description: "On successful request, the API returns list of friends with their UUID, name and current high score"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFriendsList"
        "404":
          $ref: "#/components/responses/UserNotFoundResponse"
  /users:
    parameters:
      - $ref: "#/components/parameters/HeaderParam"
    get:
      summary: Returns list of all users. Supports pagination.
      description: Returns list of all users.
      tags:
        - Users
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/TotalCountParam"
      responses:
        "200":
          description: "On successful request, the API returns list of friends with their UUID, name and current high score"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersList"

components:
  parameters:
    HeaderParam:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        description: The content type in which the client understands.
        example: application/json
    UserIdParam:
      name: user_id
      in: query
      description: User UUID
      required: true
      schema:
        type: string
        example: "3167af91-e26d-11eb-87eb-2311b3768ee0"
    PageNumberParam:
      name: page
      in: query
      description: The page number
      required: true
      schema:
        type: number
        example: 1
    TotalCountParam:
      name: perPage
      in: query
      description: The number of resources return from the server
      required: true
      schema:
        type: number
        example: 20
  requestBodies:
    UserCreateParam:
      description: Parameters to create a user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: User name
                example: "user1"
    UserUpdateParam:
      description: Updates user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              gamesPlayed:
                type: number
                description: nth game played by the user
                example: 42
              score:
                type: number
                description: High score for the current game
                example: 342
    UserFriendsUpdateParam:
      description: List of friends users UUIDs
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              friends:
                type: array
                items:
                  type: string
                example: ["7a2c45bc-e2f7-11eb-b7fb-976f97bcdaa8", "830ef046-e2f7-11eb-b9dc-976f97bcdaa8"]
  schemas:
    UserFriendsList:
      type: object
      description: friends key which will contain array of friends
      properties:
        friends:
          type: array
          items:
            type: object
          example: [
            {
              "id": "7a2c45bc-e2f7-11eb-b7fb-976f97bcdaa8",
              "username": "user2",
              "highScore": 350
            },
            {
              "id": "7a2c45bc-e2f7-11eb-h67t-976f97bcdaa8",
              "username": "user3",
              "highScore": 500
            }
          ]
    UsersList:
      type: object
      description: List of all users
      properties:
        users:
          type: array
          items:
            type: object
          example: [
            {
              "id": "7a2c45bc-e2f7-11eb-b7fb-976f97bcdaa8",
              "userName": "user2",
              "gamesPlayed": 4,
              "highScore": 350
            },
            {
              "id": "7a2c45bc-e2f7-11eb-h67t-976f97bcdaa8",
              "userName": "user3",
              "gamesPlayed": 5,
              "highScore": 500
            }
          ]
        totalCount:
          type: number
          description: Total number of users to support pagination
          example: 100

  responses:
      ErrorsResponse412:
        description: HTTP 412 Precondition Failed - Mostly happens when request body is expected and its empty
        content:
          application/vnd.api+json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  description: error description
                  example: Precondition failed
      UserNotFoundResponse:
        description: When given User uuid in the path parameter is missing / wrong, returns 404
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string
                  description: Error message
                  example: "DATA_NOT_FOUND"